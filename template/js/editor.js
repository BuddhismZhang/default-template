// Generated by CoffeeScript 1.6.2
(function() {
  var SmartEditor, SmartImagesLoader, Tips, api_url, cookie_tmp_doc, doc, get_text, insert_dom, lang,
    _this = this;

  api_url = '/service/gateway/sync';

  lang = navigator.language.toLowerCase().replace('-', '_');

  doc = this;

  insert_dom = function(dom) {
    var node, range, sel;

    node = $(dom)[0];
    if (window.getSelection) {
      sel = window.getSelection();
      if (sel.getRangeAt && sel.rangeCount) {
        range = sel.getRangeAt(0);
        range.deleteContents();
        return range.insertNode(node);
      }
    }
  };

  cookie_tmp_doc = function(path, content) {
    var base64_content, end, i, key, parts, per, start, _i, _ref;

    path = $.trim(path);
    content = $.trim(content);
    if (!path || !content) {
      return false;
    }
    base64_content = $.base64.btoa(content, true);
    per = 3600;
    parts = Math.ceil(base64_content.length / per);
    if (parts > 10) {
      return false;
    } else {
      $.cookie('sync_tmp_path', path, {
        expires: 7,
        path: '/'
      });
    }
    for (i = _i = 0, _ref = parts - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      key = 'sync_tmp_content_' + i;
      start = i * per;
      end = (i + 1) * per;
      $.cookie(key, base64_content.slice(start, end), {
        expires: 7,
        path: '/'
      });
    }
    return true;
  };

  SmartImagesLoader = function(editor) {
    var self,
      _this = this;

    this.dom = editor.dom;
    this.editor = editor;
    self = this;
    this.canvas = document.createElement('canvas');
    this.cx = this.canvas.getContext('2d');
    $(this.dom)[0].addEventListener('drop', function(event) {
      var file, files, objURL, reader, url, _i, _len;

      files = event.dataTransfer.files;
      url = window.URL || window.webkitURL;
      objURL = url.createObjectURL || false;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.type.indexOf('image') === -1) {
          continue;
        }
        if (objURL) {
          _this.load_image(objURL(file));
        } else {
          reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = function(ev) {
            return _this.load_image(ev.target.result);
          };
        }
      }
      return event.preventDefault();
    }, false);
    $(this.dom)[0].addEventListener('dragover', function(event) {
      return event.preventDefault();
    }, false);
    this.load_image = function(file) {
      var img;

      img = new Image();
      img.src = file;
      insert_dom(img);
      $(img).one('load', function() {
        var h, height, height_r, image_path, max_r, request_data, thumb_height, thumb_width, w, width, width_r;

        if (!self.editor.login) {
          return;
        }
        width = this.naturalWidth || this.width;
        height = this.naturalHeight || this.height;
        thumb_height = 2560;
        thumb_width = 1280;
        width_r = width / thumb_width;
        height_r = height / thumb_height;
        max_r = Math.max(width_r, height_r);
        w = max_r > 1 ? width / max_r : width;
        h = max_r > 1 ? height / max_r : height;
        self.canvas.width = w;
        self.canvas.height = h;
        self.cx.drawImage(this, 0, 0, w, h);
        image_path = '/_image' + $.format.date(new Date(), '/yyyy-MM-dd/HH-mm-ss') + '.jpg';
        request_data = {
          path: image_path,
          base64: self.canvas.toDataURL('image/jpeg', 0.96)
        };
        return $.post(api_url, request_data, function(resposne_data, status) {
          var new_img;

          if (status === 'success') {
            new_img = new Image();
            new_img.src = image_path;
            $(new_img).one('load', function() {
              img.src = image_path;
              return editor.sync();
            });
            if (new_img.complete) {
              return $(new_img).load();
            }
          }
        });
      });
      if (img.complete) {
        return $(img).load();
      }
    };
    this.upload_images = function() {
      var img, _i, _len, _ref;

      if (!_this.editor.login) {
        return false;
      }
      if (_this.uploaded_already != null) {
        return false;
      }
      _ref = _this.dom.find('img');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        if (img.src && (img.src.indexOf('blob:') === 0 || img.src.indexOf('data:') === 0)) {
          if (img.comlete) {
            $(img).load();
          }
        }
      }
      return _this.uploaded_already = true;
    };
    return this;
  };

  SmartEditor = function(dom) {
    var _this = this;

    this.dom = $(dom);
    this.need_sync = false;
    this.login = false;
    this.init = function() {
      var color, container, i, options, title_dom, title_text, _i;

      if (_this.editor) {
        return;
      }
      container = dom;
      for (i = _i = 0; _i <= 3; i = ++_i) {
        if (container.prev().attr('class') === 'title') {
          title_dom = container.prev();
        } else if (container.next().attr('class') === 'title') {
          title_dom = container.next();
        } else {
          container = container.parent();
        }
      }
      if (title_dom) {
        if (title_dom.children().length === 1) {
          title_dom = title_dom.children();
        }
        color = title_dom.css('color');
        _this.input_dom = $('<input type="text" style="width:100%; border:none">');
        _this.input_dom.css({
          color: title_dom.css('color'),
          'line-height': title_dom.css('line-height'),
          'font-size': title_dom.css('font-size')
        });
        title_text = $.trim(title_dom.text()) || get_text('input_title');
        _this.input_dom.val(title_text);
        title_dom.replaceWith(_this.input_dom);
        _this.input_dom.keyup(function(event) {
          if (event.which === 13) {
            _this.dom.focus();
          }
          return _this.sync();
        });
        if (!$.trim(_this.dom.text())) {
          _this.input_dom.focus();
        }
      }
      options = {
        editor: _this.dom[0],
        list: ['blockquote', 'h2', 'h3', 'p', 'inserthorizontalrule', 'bold', 'italic', 'createlink', 'insertorderedlist', 'insertunorderedlist'],
        stay: false
      };
      _this.editor = new Pen(options);
      return _this.editor._menu.addEventListener('click', function(e) {
        var action;

        action = e.target.getAttribute('data-action');
        if (action) {
          return _this.need_sync = true;
        }
      });
    };
    this.get_content = function() {
      var text;

      if (_this.input_dom) {
        text = 'title: ' + _this.input_dom.val() + '\n\n';
      } else {
        text = '';
      }
      text += $.trim(toMarkdown(_this.dom.html()));
      return text;
    };
    this.get_path = function() {
      var path, path_dom, _path;

      path_dom = _this.dom.prev('input[type=hidden]');
      if (path_dom) {
        path = path_dom.val();
        if (!path) {
          _path = location.pathname.split('/').slice(2).join('/');
          if (_path) {
            return _path + '.txt';
          } else {
            return $.format.date(new Date(), 'yyyy-MM-dd') + '.txt';
          }
        }
        return path;
      } else {
        return '';
      }
    };
    this.sync_per_seconds = 30;
    this.sync = function() {
      var data, path;

      doc.no_reload = true;
      if (!_this.keep_sync_set) {
        _this.keep_sync_set = true;
        setInterval(_this.keep_sync, 10 * 1000);
      }
      _this.uploader.upload_images();
      if (!_this.last_sync_at) {
        _this.last_sync_at = new Date() - _this.sync_per_seconds * 1000 + 10 * 1000;
      }
      if (new Date() - _this.last_sync_at < _this.sync_per_seconds * 1000) {
        _this.need_sync = true;
        return false;
      } else {
        _this.need_sync = false;
        _this.last_sync_at = new Date();
      }
      path = _this.get_path();
      if (!path) {
        return;
      }
      data = {
        path: _this.get_path(),
        raw_content: _this.get_content()
      };
      return $.post(api_url, data, function(response_data) {
        var message;

        if (response_data.error_code) {
          message = response_data.message;
          if (response_data.error_code === 401) {
            message += ' <a href="#" onclick="javascript:login()" >Click Here</a>';
          }
          return Essage.show({
            message: message,
            status: 'error'
          });
        } else {
          return _this.login = true;
        }
      });
    };
    this.keep_sync = function() {
      if (!_this.need_sync) {

      } else {
        return _this.sync();
      }
    };
    this.dom.keyup(function(e) {
      return _this.sync();
    });
    this.uploader = new SmartImagesLoader(this);
    return this;
  };

  this.editors = [];

  $(document).ready(function() {
    var dom, editor, _i, _len, _ref, _results;

    _ref = $('.fb-editor');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dom = _ref[_i];
      editor = new SmartEditor($(dom));
      editor.init();
      _results.push(_this.editors.push(editor));
    }
    return _results;
  });

  Tips = {
    'content_not_saveed': 'The content is not saved yet, Please wait for a moment!',
    'content_not_saveed_zh_cn': '内容正在保存，请稍后关闭！',
    'image_uploading': 'Images are still uploading, Please wait for a moment!',
    'image_uploading_zh_cn': '图片尚在上传，请稍后关闭！',
    'input_title': 'Hi, FarBox!'
  };

  get_text = function(key) {
    return Tips[key + '_' + lang] || Tips[key];
  };

  window.onbeforeunload = function() {
    var cached, editor, img, imgs, stay, _i, _j, _len, _len1, _ref;

    stay = false;
    _ref = _this.editors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      editor = _ref[_i];
      imgs = $(editor.dom).find('img');
      for (_j = 0, _len1 = imgs.length; _j < _len1; _j++) {
        img = imgs[_j];
        if (img.src && (img.src.indexOf('blob:') === 0 || img.src.indexOf('data:') === 0)) {
          return get_text('image_uploading');
        }
      }
      if (editor.need_sync) {
        cached = cookie_tmp_doc(editor.get_path(), editor.get_content());
        if (!cached) {
          editor.sync();
          stay = true;
        }
      }
    }
    if (stay) {
      return get_text('content_not_saved');
    } else {
      return null;
    }
  };

}).call(this);
